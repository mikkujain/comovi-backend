# Generated by Django 2.1.7 on 2019-05-02 04:34

import comovi.apps.core.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('first_name', models.CharField(max_length=30, verbose_name='Nombre')),
                ('last_name', models.CharField(max_length=30, verbose_name='Apellido paterno')),
                ('mother_last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='Apellido materno')),
                ('rfc', models.CharField(blank=True, max_length=13, null=True, verbose_name='RFC')),
                ('gender', models.PositiveIntegerField(choices=[(1, 'Masculino'), (2, 'Femenino')], default=2)),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 10 digits allowed.", regex='^\\+?1?\\d{8,10}$')], verbose_name='Teléfono')),
                ('cell_phone', models.CharField(blank=True, max_length=10, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 10 digits allowed.", regex='^\\+?1?\\d{8,10}$')], verbose_name='Celular')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to=comovi.apps.core.models.get_path_user_profile_picture, verbose_name='Foto de perfil')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_users', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AddressProperty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('street', models.CharField(max_length=500, verbose_name='Calle/Avenida')),
                ('exterior_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Número exterior')),
                ('interior_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Número interior')),
                ('colony', models.CharField(blank=True, max_length=500, null=True, verbose_name='Colonia')),
                ('zip_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Código postal')),
                ('city', models.CharField(blank=True, max_length=128, null=True, verbose_name='Ciudad/Delegación')),
                ('state', models.CharField(blank=True, max_length=64, null=True, verbose_name='Estado')),
                ('reference', models.CharField(blank=True, max_length=500, null=True, verbose_name='Referencias')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_addresspropertys', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_addresspropertys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dirección',
                'verbose_name_plural': 'Direcciones',
            },
        ),
        migrations.CreateModel(
            name='AdminProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_adminprofiles', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_adminprofiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de administrador',
                'verbose_name_plural': 'Perfiles de administrador',
            },
        ),
        migrations.CreateModel(
            name='CatalogService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Descripción')),
                ('periodicity', models.PositiveIntegerField(choices=[(1, 'Única ocasión'), (2, 'Diario'), (3, 'Semanal'), (4, 'Cada dos semanas'), (5, 'Mensual'), (6, 'Anual')], default=1, verbose_name='Periodicidad')),
                ('prepayment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Pago por adelantado')),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Monto fijo a pagar')),
                ('untimely_payment_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Pago extemporáneo')),
                ('can_be_paid_online', models.BooleanField(default=False, verbose_name='¿Se puede pagar en la plataforma?')),
                ('payment_link', models.URLField(blank=True, help_text='En caso de no poderse pagar en línea, se redigirá a esta liga de pago', max_length=500, null=True, verbose_name='Liga de pago')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_catalogservices', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_catalogservices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tipo de servicio',
                'verbose_name_plural': 'Tipos de servicio',
            },
        ),
        migrations.CreateModel(
            name='ContactProperty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('phone', models.CharField(blank=True, max_length=10, null=True, verbose_name='Teléfono')),
                ('email', models.CharField(blank=True, max_length=100, null=True, verbose_name='Correo eletrónico')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contactpropertys', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_contactpropertys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contacto',
                'verbose_name_plural': 'Contactos',
            },
        ),
        migrations.CreateModel(
            name='ContactType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contacttypes', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_contacttypes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tipo de contacto',
                'verbose_name_plural': 'Tipos de contacto',
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('subject', models.CharField(default='', max_length=150, verbose_name='Asunto')),
                ('priority', models.PositiveIntegerField(choices=[(1, 'Prioridad alta'), (2, 'Prioridad media'), (3, 'Prioridad baja')], default=2, verbose_name='Prioridad')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_conversations', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-date_creation', '-date_modification'),
            },
        ),
        migrations.CreateModel(
            name='InboxMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('message', models.TextField(default='Fill in the description', verbose_name='Mensaje')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.Conversation')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_inboxmessages', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_inboxmessages', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='own_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Mensaje',
                'verbose_name_plural': 'Mensajes',
                'ordering': ('-date_creation', 'date_modification'),
            },
        ),
        migrations.CreateModel(
            name='MessageMeta',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_seen', models.BooleanField(default=False, verbose_name='¿Visto?')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metas', to='core.InboxMessage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='message_metas', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OwnerProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_ownerprofiles', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_ownerprofiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de condómino',
                'verbose_name_plural': 'Perfiles de condómino',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('payment_datetime', models.DateTimeField(verbose_name='Fecha/Hora de pago')),
                ('voucher', models.FileField(upload_to=comovi.apps.core.models.get_path_interior_files, verbose_name='Comprobante de pago')),
                ('approval_number', models.CharField(blank=True, max_length=500, null=True, verbose_name='Número de aprobación')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_payments', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Pago',
                'verbose_name_plural': 'Pagos',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_paymenttypes', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_paymenttypes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tipo de pago',
                'verbose_name_plural': 'Tipos de pago',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('title', models.CharField(max_length=100, verbose_name='Título')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to=comovi.apps.core.models.get_path_post_files, verbose_name='Imagen')),
                ('seen', models.BooleanField(default=False, verbose_name='visto')),
                ('body', models.TextField(max_length=1000, verbose_name='Descripción')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Comunicado',
                'verbose_name_plural': 'Comunicados',
            },
        ),
        migrations.CreateModel(
            name='PostAttachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('file', models.FileField(upload_to=comovi.apps.core.models.get_path_post_files, verbose_name='Archivo')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_postattachments', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_postattachments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='core.Post', verbose_name='Comunicado')),
            ],
            options={
                'verbose_name': 'Archivo adjunto',
                'verbose_name_plural': 'Archivos adjuntos',
            },
        ),
        migrations.CreateModel(
            name='PostCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=50, verbose_name='Nombre de categoría')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_postcategorys', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_postcategorys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Nombre de categoría',
                'verbose_name_plural': 'Nombres de categoría',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=300, verbose_name='Nombre')),
                ('status', models.IntegerField(choices=[(1, 'Registrado'), (2, 'Contratado')], default=1)),
                ('description', models.TextField(default='Fill the description')),
                ('building_picture', models.ImageField(blank=True, null=True, upload_to=comovi.apps.core.models.get_path_user_profile_picture)),
                ('property_logo', models.ImageField(blank=True, null=True, upload_to=comovi.apps.core.models.get_path_media_images)),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_propertys', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_propertys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Propiedad',
                'verbose_name_plural': 'Propiedades',
            },
        ),
        migrations.CreateModel(
            name='PropertyInterior',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('number', models.CharField(max_length=100, verbose_name='Número interior')),
                ('status_occupancy', models.PositiveIntegerField(choices=[(1, 'Vacío'), (2, 'Ocupado')], default=1, verbose_name='Ocupación')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_propertyinteriors', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_propertyinteriors', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='interiors', to='core.Property', verbose_name='Propiedad')),
                ('resident', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Residente')),
            ],
            options={
                'verbose_name': 'Interior',
                'verbose_name_plural': 'Interiores',
            },
        ),
        migrations.CreateModel(
            name='PropertyInteriorHasService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Monto')),
                ('due_date', models.DateField(verbose_name='Fecha de vencimiento')),
                ('invoice', models.FileField(blank=True, null=True, upload_to=comovi.apps.core.models.get_path_media_files, verbose_name='Archivo')),
                ('status_payment', models.PositiveIntegerField(choices=[(1, 'Pendiente'), (2, 'Pendiente de revisión'), (3, 'Pagado')], default=1, verbose_name='Estatus de pago')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_propertyinteriorhasservices', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_propertyinteriorhasservices', to=settings.AUTH_USER_MODEL)),
                ('property_interior', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.PropertyInterior', verbose_name='Interior')),
                ('service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.CatalogService', verbose_name='Tipo de servicio')),
            ],
            options={
                'verbose_name': 'Servicio',
                'verbose_name_plural': 'Servicios',
            },
        ),
        migrations.CreateModel(
            name='PropertyPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('show_stats', models.BooleanField(default=True, verbose_name='¿Mostrar estadísticas?')),
                ('show_services', models.BooleanField(default=True, verbose_name='¿Mostrar servicios?')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_propertypreferencess', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_propertypreferencess', to=settings.AUTH_USER_MODEL)),
                ('property', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to='core.Property')),
                ('services_to_show', models.ManyToManyField(blank=True, to='core.CatalogService', verbose_name='Servicios a mostrar')),
            ],
            options={
                'verbose_name': 'Preferencias',
                'verbose_name_plural': 'Preferencias',
            },
        ),
        migrations.CreateModel(
            name='SitePreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Fecha de creación')),
                ('date_modification', models.DateTimeField(auto_now_add=True, null=True)),
                ('site_logo', models.ImageField(blank=True, null=True, upload_to=comovi.apps.core.models.get_path_media_images, verbose_name='Logo del sitio')),
                ('site_name', models.CharField(blank=True, default='BASE_NAME', max_length=100, null=True, verbose_name='Nombre del sitio')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_sitepreferencess', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_sitepreferencess', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preferencias del sitio',
                'verbose_name_plural': 'Preferencias del sitio',
            },
            bases=(models.Model, comovi.apps.core.models.PreferenceMixin),
        ),
        migrations.AddField(
            model_name='post',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.PostCategory', verbose_name='Nombre de categoría'),
        ),
        migrations.AddField(
            model_name='post',
            name='created_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='modified_by',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_posts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='post',
            name='property',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='newspaper', to='core.Property', verbose_name='Propiedad'),
        ),
        migrations.AddField(
            model_name='payment',
            name='property_interior_has_service',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.PropertyInteriorHasService', verbose_name='Interior'),
        ),
        migrations.AddField(
            model_name='ownerprofile',
            name='property_interiors_owned',
            field=models.ManyToManyField(blank=True, related_name='owner_profiles', to='core.PropertyInterior', verbose_name='Interiores que posee'),
        ),
        migrations.AddField(
            model_name='ownerprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='owner_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='property_interior',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='core.PropertyInterior'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='receivers',
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL, verbose_name='Destinatarios'),
        ),
        migrations.AddField(
            model_name='conversation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contactproperty',
            name='property',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='core.Property'),
        ),
        migrations.AddField(
            model_name='contactproperty',
            name='type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.ContactType', verbose_name='Tipo de contacto'),
        ),
        migrations.AddField(
            model_name='catalogservice',
            name='payment_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.PaymentType', verbose_name='Tipo de pago'),
        ),
        migrations.AddField(
            model_name='adminprofile',
            name='properties_managed',
            field=models.ManyToManyField(blank=True, related_name='admin_profiles', to='core.Property', verbose_name='Propiedades que administra'),
        ),
        migrations.AddField(
            model_name='adminprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admin_profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario'),
        ),
        migrations.AddField(
            model_name='addressproperty',
            name='property',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='address', to='core.Property'),
        ),
        migrations.AlterUniqueTogether(
            name='messagemeta',
            unique_together={('user', 'message')},
        ),
    ]
